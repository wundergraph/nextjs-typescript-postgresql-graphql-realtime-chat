{
  "apiName": "api",
  "apiId": "",
  "deploymentName": "main",
  "environmentIds": [
    ""
  ],
  "api": {
    "enableGraphqlEndpoint": false,
    "operations": [
      {
        "content": "mutation AddMessage($email: String! @fromClaim(name: EMAIL), $name: String! @fromClaim(name: NAME), $message: String!) @rbac(requireMatchAll: [user]) {\n  createOnemessages: db_createOnemessages(\n    data: {message: $message, users: {connectOrCreate: {create: {name: $name, email: $email}, where: {email: $email}}}}\n  ) {\n    id\n    message\n  }\n}\n",
        "name": "AddMessage",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"createOnemessages\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"message\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"}},\"additionalProperties\":false,\"definitions\":{},\"required\":[\"message\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"}},\"additionalProperties\":false,\"definitions\":{},\"required\":[\"message\"]}",
        "operationType": 1,
        "cacheConfig": {
          "enable": false,
          "maxAge": 0,
          "public": false,
          "staleWhileRevalidate": 0
        },
        "authenticationConfig": {
          "authRequired": true
        },
        "authorizationConfig": {
          "claims": [
            {
              "variableName": "email",
              "claim": 0
            },
            {
              "variableName": "name",
              "claim": 2
            }
          ],
          "roleConfig": {
            "requireMatchAll": [
              "user"
            ],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "query AllUsers($email: String!) {\n  findManyusers: db_findManyusers(where: {email: {equals: $email}}) {\n    id\n    email\n    name\n    messages(take: 5, orderBy: [{id: desc}]) {\n      id\n      message\n    }\n  }\n}\n",
        "name": "AllUsers",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"findManyusers\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"email\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"messages\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"message\"]}}},\"additionalProperties\":false,\"required\":[\"id\",\"email\",\"name\"]}}},\"additionalProperties\":false,\"required\":[\"findManyusers\"]}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"}},\"additionalProperties\":false,\"definitions\":{},\"required\":[\"email\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"}},\"additionalProperties\":false,\"definitions\":{},\"required\":[\"email\"]}",
        "operationType": 0,
        "cacheConfig": {
          "enable": false,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 1
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "mutation ChangeUserName($newName: String!, $email: String! @fromClaim(name: EMAIL), $updatedAt: DateTime! @injectCurrentDateTime) {\n  updateOneusers: db_updateOneusers(\n    data: {name: {set: $newName}, updatedat: {set: $updatedAt}}\n    where: {email: $email}\n  ) {\n    id\n    email\n    name\n    updatedat\n  }\n}\n",
        "name": "ChangeUserName",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"updateOneusers\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"email\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"updatedat\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"email\",\"name\",\"updatedat\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"newName\":{\"type\":\"string\"}},\"additionalProperties\":false,\"definitions\":{},\"required\":[\"newName\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"newName\":{\"type\":\"string\"}},\"additionalProperties\":false,\"definitions\":{},\"required\":[\"newName\"]}",
        "operationType": 1,
        "cacheConfig": {
          "enable": false,
          "maxAge": 0,
          "public": false,
          "staleWhileRevalidate": 0
        },
        "authenticationConfig": {
          "authRequired": true
        },
        "authorizationConfig": {
          "claims": [
            {
              "variableName": "email",
              "claim": 0
            }
          ],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false
        },
        "variablesConfiguration": {
          "injectVariables": [
            {
              "environmentVariableName": "",
              "dateFormat": "2006-01-02T15:04:05Z07:00",
              "variableName": "updatedAt",
              "variableKind": 1
            }
          ]
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "mutation DeleteAllMessagesByUserEmail($email: String!) @rbac(requireMatchAll: [superadmin]) {\n  deleteManymessages: db_deleteManymessages(\n    where: {users: {is: {email: {equals: $email}}}}\n  ) {\n    count\n  }\n}\n",
        "name": "DeleteAllMessagesByUserEmail",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"deleteManymessages\":{\"type\":\"object\",\"properties\":{\"count\":{\"type\":\"integer\"}},\"additionalProperties\":false,\"required\":[\"count\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"}},\"additionalProperties\":false,\"definitions\":{},\"required\":[\"email\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"}},\"additionalProperties\":false,\"definitions\":{},\"required\":[\"email\"]}",
        "operationType": 1,
        "cacheConfig": {
          "enable": false,
          "maxAge": 0,
          "public": false,
          "staleWhileRevalidate": 0
        },
        "authenticationConfig": {
          "authRequired": true
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [
              "superadmin"
            ],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "query Messages {\n  findManymessages: db_findManymessages(take: 20, orderBy: [{id: desc}]) {\n    id\n    message\n    users {\n      id\n      name\n    }\n  }\n}\n",
        "name": "Messages",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"findManymessages\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"},\"users\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"name\"]}},\"additionalProperties\":false,\"required\":[\"id\",\"message\",\"users\"]}}},\"additionalProperties\":false,\"required\":[\"findManymessages\"]}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false,\"definitions\":{}}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false,\"definitions\":{}}",
        "operationType": 0,
        "cacheConfig": {
          "enable": false,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 1
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "query MockQuery {\n  findFirstusers: db_findFirstusers {\n    id\n    email\n    name\n  }\n}\n",
        "name": "MockQuery",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"findFirstusers\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"email\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"email\",\"name\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false,\"definitions\":{}}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false,\"definitions\":{}}",
        "operationType": 0,
        "cacheConfig": {
          "enable": false,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 1
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": true,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "mutation SetLastLogin($email: String!, $now: DateTime! @injectCurrentDateTime) @internalOperation {\n  updateOneusers: db_updateOneusers(\n    where: {email: $email}\n    data: {lastlogin: {set: $now}}\n  ) {\n    id\n    lastlogin\n  }\n}\n",
        "name": "SetLastLogin",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"updateOneusers\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"lastlogin\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"lastlogin\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"}},\"additionalProperties\":false,\"definitions\":{},\"required\":[\"email\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"}},\"additionalProperties\":false,\"definitions\":{},\"required\":[\"email\"]}",
        "operationType": 1,
        "cacheConfig": {
          "enable": false,
          "maxAge": 0,
          "public": false,
          "staleWhileRevalidate": 0
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false
        },
        "variablesConfiguration": {
          "injectVariables": [
            {
              "environmentVariableName": "",
              "dateFormat": "2006-01-02T15:04:05Z07:00",
              "variableName": "now",
              "variableKind": 1
            }
          ]
        },
        "internal": true,
        "postResolveTransformations": []
      },
      {
        "content": "mutation UpdateUser($id: Int!, $create: db_usersCreateInput!, $update: db_usersUpdateInput!) {\n  db_upsertOneusers(where: {id: $id}, create: $create, update: $update) {\n    id\n    name\n    email\n  }\n}\n",
        "name": "UpdateUser",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"db_upsertOneusers\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"email\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"name\",\"email\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"create\":{\"$ref\":\"#/definitions/db_usersCreateInput\"},\"update\":{\"$ref\":\"#/definitions/db_usersUpdateInput\"}},\"additionalProperties\":false,\"definitions\":{\"db_usersCreateInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"updatedat\":{\"type\":\"string\"},\"lastlogin\":{\"type\":\"string\"},\"messages\":{\"$ref\":\"#/definitions/db_messagesCreateNestedManyWithoutUsersInput\"}},\"required\":[\"email\",\"name\"]},\"db_messagesCreateNestedManyWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"create\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesCreateWithoutUsersInput\"}},\"connectOrCreate\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesCreateOrConnectWithoutUsersInput\"}},\"createMany\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesCreateManyUsersInputEnvelope\"}},\"connect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"}}}},\"db_messagesCreateWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"}},\"required\":[\"message\"]},\"db_messagesCreateOrConnectWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"},\"create\":{\"type\":\"array\",\"minItems\":1,\"items\":{\"$ref\":\"#/definitions/db_messagesCreateWithoutUsersInput\"}}},\"required\":[\"where\"]},\"db_messagesWhereUniqueInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}}},\"db_messagesCreateManyUsersInputEnvelope\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesCreateManyUsersInput\"}},\"skipDuplicates\":{\"type\":\"boolean\"}},\"required\":[\"data\"]},\"db_messagesCreateManyUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"}},\"required\":[\"message\"]},\"db_usersUpdateInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"email\":{\"$ref\":\"#/definitions/db_StringFieldUpdateOperationsInput\"},\"name\":{\"$ref\":\"#/definitions/db_StringFieldUpdateOperationsInput\"},\"updatedat\":{\"$ref\":\"#/definitions/db_DateTimeFieldUpdateOperationsInput\"},\"lastlogin\":{\"$ref\":\"#/definitions/db_DateTimeFieldUpdateOperationsInput\"},\"messages\":{\"$ref\":\"#/definitions/db_messagesUpdateManyWithoutUsersInput\"}}},\"db_StringFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}},\"db_DateTimeFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}},\"db_messagesUpdateManyWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"create\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesCreateWithoutUsersInput\"}},\"connectOrCreate\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesCreateOrConnectWithoutUsersInput\"}},\"upsert\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesUpsertWithWhereUniqueWithoutUsersInput\"}},\"createMany\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesCreateManyUsersInputEnvelope\"}},\"connect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"}},\"set\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"},\"disconnect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"}},\"delete\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"}},\"update\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesUpdateWithWhereUniqueWithoutUsersInput\"}},\"updateMany\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesUpdateManyWithWhereWithoutUsersInput\"}},\"deleteMany\":{\"$ref\":\"#/definitions/db_messagesScalarWhereInput\"}}},\"db_messagesUpsertWithWhereUniqueWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"},\"update\":{\"type\":\"array\",\"minItems\":1,\"items\":{\"$ref\":\"#/definitions/db_messagesUpdateWithoutUsersInput\"}},\"create\":{\"type\":\"array\",\"minItems\":1,\"items\":{\"$ref\":\"#/definitions/db_messagesCreateWithoutUsersInput\"}}},\"required\":[\"where\"]},\"db_messagesUpdateWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"message\":{\"$ref\":\"#/definitions/db_StringFieldUpdateOperationsInput\"}}},\"db_messagesUpdateWithWhereUniqueWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"},\"data\":{\"$ref\":\"#/definitions/db_messagesUpdateWithoutUsersInput\"}},\"required\":[\"where\",\"data\"]},\"db_messagesUpdateManyWithWhereWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/db_messagesScalarWhereInput\"},\"data\":{\"$ref\":\"#/definitions/db_messagesUpdateManyMutationInput\"}},\"required\":[\"where\",\"data\"]},\"db_messagesScalarWhereInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"AND\":{\"$ref\":\"#/definitions/db_messagesScalarWhereInput\"},\"OR\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesScalarWhereInput\"}},\"NOT\":{\"$ref\":\"#/definitions/db_messagesScalarWhereInput\"},\"id\":{\"$ref\":\"#/definitions/db_IntFilter\"},\"user_id\":{\"$ref\":\"#/definitions/db_IntFilter\"},\"message\":{\"$ref\":\"#/definitions/db_StringFilter\"}}},\"db_IntFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"integer\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"lt\":{\"type\":\"integer\"},\"lte\":{\"type\":\"integer\"},\"gt\":{\"type\":\"integer\"},\"gte\":{\"type\":\"integer\"},\"not\":{\"$ref\":\"#/definitions/db_NestedIntFilter\"}}},\"db_NestedIntFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"integer\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"lt\":{\"type\":\"integer\"},\"lte\":{\"type\":\"integer\"},\"gt\":{\"type\":\"integer\"},\"gte\":{\"type\":\"integer\"},\"not\":{\"$ref\":\"#/definitions/db_NestedIntFilter\"}}},\"db_StringFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"string\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"lt\":{\"type\":\"string\"},\"lte\":{\"type\":\"string\"},\"gt\":{\"type\":\"string\"},\"gte\":{\"type\":\"string\"},\"contains\":{\"type\":\"string\"},\"startsWith\":{\"type\":\"string\"},\"endsWith\":{\"type\":\"string\"},\"mode\":{\"type\":\"string\",\"enum\":[\"default\",\"insensitive\"]},\"not\":{\"$ref\":\"#/definitions/db_NestedStringFilter\"}}},\"db_NestedStringFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"string\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"lt\":{\"type\":\"string\"},\"lte\":{\"type\":\"string\"},\"gt\":{\"type\":\"string\"},\"gte\":{\"type\":\"string\"},\"contains\":{\"type\":\"string\"},\"startsWith\":{\"type\":\"string\"},\"endsWith\":{\"type\":\"string\"},\"not\":{\"$ref\":\"#/definitions/db_NestedStringFilter\"}}},\"db_messagesUpdateManyMutationInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"message\":{\"$ref\":\"#/definitions/db_StringFieldUpdateOperationsInput\"}}}},\"required\":[\"id\",\"create\",\"update\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"create\":{\"$ref\":\"#/definitions/db_usersCreateInput\"},\"update\":{\"$ref\":\"#/definitions/db_usersUpdateInput\"}},\"additionalProperties\":false,\"definitions\":{\"db_usersCreateInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"updatedat\":{\"type\":\"string\"},\"lastlogin\":{\"type\":\"string\"},\"messages\":{\"$ref\":\"#/definitions/db_messagesCreateNestedManyWithoutUsersInput\"}},\"required\":[\"email\",\"name\"]},\"db_messagesCreateNestedManyWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"create\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesCreateWithoutUsersInput\"}},\"connectOrCreate\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesCreateOrConnectWithoutUsersInput\"}},\"createMany\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesCreateManyUsersInputEnvelope\"}},\"connect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"}}}},\"db_messagesCreateWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"}},\"required\":[\"message\"]},\"db_messagesCreateOrConnectWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"},\"create\":{\"type\":\"array\",\"minItems\":1,\"items\":{\"$ref\":\"#/definitions/db_messagesCreateWithoutUsersInput\"}}},\"required\":[\"where\"]},\"db_messagesWhereUniqueInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}}},\"db_messagesCreateManyUsersInputEnvelope\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesCreateManyUsersInput\"}},\"skipDuplicates\":{\"type\":\"boolean\"}},\"required\":[\"data\"]},\"db_messagesCreateManyUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"}},\"required\":[\"message\"]},\"db_usersUpdateInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"email\":{\"$ref\":\"#/definitions/db_StringFieldUpdateOperationsInput\"},\"name\":{\"$ref\":\"#/definitions/db_StringFieldUpdateOperationsInput\"},\"updatedat\":{\"$ref\":\"#/definitions/db_DateTimeFieldUpdateOperationsInput\"},\"lastlogin\":{\"$ref\":\"#/definitions/db_DateTimeFieldUpdateOperationsInput\"},\"messages\":{\"$ref\":\"#/definitions/db_messagesUpdateManyWithoutUsersInput\"}}},\"db_StringFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}},\"db_DateTimeFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}},\"db_messagesUpdateManyWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"create\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesCreateWithoutUsersInput\"}},\"connectOrCreate\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesCreateOrConnectWithoutUsersInput\"}},\"upsert\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesUpsertWithWhereUniqueWithoutUsersInput\"}},\"createMany\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesCreateManyUsersInputEnvelope\"}},\"connect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"}},\"set\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"},\"disconnect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"}},\"delete\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"}},\"update\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesUpdateWithWhereUniqueWithoutUsersInput\"}},\"updateMany\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesUpdateManyWithWhereWithoutUsersInput\"}},\"deleteMany\":{\"$ref\":\"#/definitions/db_messagesScalarWhereInput\"}}},\"db_messagesUpsertWithWhereUniqueWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"},\"update\":{\"type\":\"array\",\"minItems\":1,\"items\":{\"$ref\":\"#/definitions/db_messagesUpdateWithoutUsersInput\"}},\"create\":{\"type\":\"array\",\"minItems\":1,\"items\":{\"$ref\":\"#/definitions/db_messagesCreateWithoutUsersInput\"}}},\"required\":[\"where\"]},\"db_messagesUpdateWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"message\":{\"$ref\":\"#/definitions/db_StringFieldUpdateOperationsInput\"}}},\"db_messagesUpdateWithWhereUniqueWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/db_messagesWhereUniqueInput\"},\"data\":{\"$ref\":\"#/definitions/db_messagesUpdateWithoutUsersInput\"}},\"required\":[\"where\",\"data\"]},\"db_messagesUpdateManyWithWhereWithoutUsersInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/db_messagesScalarWhereInput\"},\"data\":{\"$ref\":\"#/definitions/db_messagesUpdateManyMutationInput\"}},\"required\":[\"where\",\"data\"]},\"db_messagesScalarWhereInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"AND\":{\"$ref\":\"#/definitions/db_messagesScalarWhereInput\"},\"OR\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/db_messagesScalarWhereInput\"}},\"NOT\":{\"$ref\":\"#/definitions/db_messagesScalarWhereInput\"},\"id\":{\"$ref\":\"#/definitions/db_IntFilter\"},\"user_id\":{\"$ref\":\"#/definitions/db_IntFilter\"},\"message\":{\"$ref\":\"#/definitions/db_StringFilter\"}}},\"db_IntFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"integer\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"lt\":{\"type\":\"integer\"},\"lte\":{\"type\":\"integer\"},\"gt\":{\"type\":\"integer\"},\"gte\":{\"type\":\"integer\"},\"not\":{\"$ref\":\"#/definitions/db_NestedIntFilter\"}}},\"db_NestedIntFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"integer\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"lt\":{\"type\":\"integer\"},\"lte\":{\"type\":\"integer\"},\"gt\":{\"type\":\"integer\"},\"gte\":{\"type\":\"integer\"},\"not\":{\"$ref\":\"#/definitions/db_NestedIntFilter\"}}},\"db_StringFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"string\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"lt\":{\"type\":\"string\"},\"lte\":{\"type\":\"string\"},\"gt\":{\"type\":\"string\"},\"gte\":{\"type\":\"string\"},\"contains\":{\"type\":\"string\"},\"startsWith\":{\"type\":\"string\"},\"endsWith\":{\"type\":\"string\"},\"mode\":{\"type\":\"string\",\"enum\":[\"default\",\"insensitive\"]},\"not\":{\"$ref\":\"#/definitions/db_NestedStringFilter\"}}},\"db_NestedStringFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"string\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"lt\":{\"type\":\"string\"},\"lte\":{\"type\":\"string\"},\"gt\":{\"type\":\"string\"},\"gte\":{\"type\":\"string\"},\"contains\":{\"type\":\"string\"},\"startsWith\":{\"type\":\"string\"},\"endsWith\":{\"type\":\"string\"},\"not\":{\"$ref\":\"#/definitions/db_NestedStringFilter\"}}},\"db_messagesUpdateManyMutationInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"message\":{\"$ref\":\"#/definitions/db_StringFieldUpdateOperationsInput\"}}}},\"required\":[\"id\",\"create\",\"update\"]}",
        "operationType": 1,
        "cacheConfig": {
          "enable": false,
          "maxAge": 0,
          "public": false,
          "staleWhileRevalidate": 0
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "query UserInfo($email: String! @fromClaim(name: EMAIL)) {\n  findFirstusers: db_findFirstusers(where: {email: {equals: $email}}) {\n    id\n    email\n    name\n    lastlogin\n  }\n}\n",
        "name": "UserInfo",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"findFirstusers\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"email\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"lastlogin\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"email\",\"name\",\"lastlogin\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false,\"definitions\":{}}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false,\"definitions\":{}}",
        "operationType": 0,
        "cacheConfig": {
          "enable": false,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": true
        },
        "authorizationConfig": {
          "claims": [
            {
              "variableName": "email",
              "claim": 0
            }
          ],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 1
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      }
    ],
    "engineConfiguration": {
      "defaultFlushInterval": 500,
      "graphqlSchema": "directive @fromClaim(name: Claim) on VARIABLE_DEFINITION\n\ndirective @hooksVariable on VARIABLE_DEFINITION\n\ndirective @jsonSchema(\n  \"\"\"\n  The value of both of these keywords MUST be a string.\n  \n  Both of these keywords can be used to decorate a user interface with\n  information about the data produced by this user interface.  A title\n  will preferably be short, whereas a description will provide\n  explanation about the purpose of the instance described by this\n  schema.\n  \"\"\"\n  title: String\n  \"\"\"\n  The value of both of these keywords MUST be a string.\n  \n  Both of these keywords can be used to decorate a user interface with\n  information about the data produced by this user interface.  A title\n  will preferably be short, whereas a description will provide\n  explanation about the purpose of the instance described by this\n  schema.\n  \"\"\"\n  description: String\n  \"\"\"\n  The value of \"multipleOf\" MUST be a number, strictly greater than 0.\n  \n  A numeric instance is valid only if division by this keyword's value\n  results in an integer.\n  \"\"\"\n  multipleOf: Int\n  \"\"\"\n  The value of \"maximum\" MUST be a number, representing an inclusive\n  upper limit for a numeric instance.\n  \n  If the instance is a number, then this keyword validates only if the\n  instance is less than or exactly equal to \"maximum\".\n  \"\"\"\n  maximum: Int\n  \"\"\"\n  The value of \"exclusiveMaximum\" MUST be number, representing an\n  exclusive upper limit for a numeric instance.\n  \n  If the instance is a number, then the instance is valid only if it\n  has a value strictly less than (not equal to) \"exclusiveMaximum\".\n  \"\"\"\n  exclusiveMaximum: Int\n  \"\"\"\n  The value of \"minimum\" MUST be a number, representing an inclusive\n  lower limit for a numeric instance.\n  \n  If the instance is a number, then this keyword validates only if the\n  instance is greater than or exactly equal to \"minimum\".\n  \"\"\"\n  minimum: Int\n  \"\"\"\n  The value of \"exclusiveMinimum\" MUST be number, representing an\n  exclusive lower limit for a numeric instance.\n  \n  If the instance is a number, then the instance is valid only if it\n  has a value strictly greater than (not equal to) \"exclusiveMinimum\".\n  \"\"\"\n  exclusiveMinimum: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  A string instance is valid against this keyword if its length is less\n  than, or equal to, the value of this keyword.\n  \n  The length of a string instance is defined as the number of its\n  characters as defined by RFC 7159 [RFC7159].\n  \"\"\"\n  maxLength: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  A string instance is valid against this keyword if its length is\n  greater than, or equal to, the value of this keyword.\n  \n  The length of a string instance is defined as the number of its\n  characters as defined by RFC 7159 [RFC7159].\n  \n  Omitting this keyword has the same behavior as a value of 0.\n  \"\"\"\n  minLength: Int\n  \"\"\"\n  The value of this keyword MUST be a string.  This string SHOULD be a\n  valid regular expression, according to the ECMA 262 regular\n  expression dialect.\n  \n  A string instance is considered valid if the regular expression\n  matches the instance successfully.  Recall: regular expressions are\n  not implicitly anchored.\n  \"\"\"\n  pattern: String\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  An array instance is valid against \"maxItems\" if its size is less\n  than, or equal to, the value of this keyword.\n  \"\"\"\n  maxItems: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  An array instance is valid against \"minItems\" if its size is greater\n  than, or equal to, the value of this keyword.\n  \n  Omitting this keyword has the same behavior as a value of 0.\n  \"\"\"\n  minItems: Int\n  \"\"\"\n  The value of this keyword MUST be a boolean.\n  \n  If this keyword has boolean value false, the instance validates\n  successfully.  If it has boolean value true, the instance validates\n  successfully if all of its elements are unique.\n  \n  Omitting this keyword has the same behavior as a value of false.\n  \"\"\"\n  uniqueItems: Boolean\n  commonPattern: COMMON_REGEX_PATTERN\n) on VARIABLE_DEFINITION\n\ndirective @rbac(\n  \"\"\"the user must match all roles\"\"\"\n  requireMatchAll: [WG_ROLE]\n  \"\"\"the user must match at least one of the roles\"\"\"\n  requireMatchAny: [WG_ROLE]\n  \"\"\"the user must not match all of the roles\"\"\"\n  denyMatchAll: [WG_ROLE]\n  \"\"\"the user must not match any of the roles\"\"\"\n  denyMatchAny: [WG_ROLE]\n) on QUERY | MUTATION | SUBSCRIPTION\n\n\"\"\"\nThe directive @injectCurrentDateTime injects a DateTime string of the current date and time into the variable.\nThis variable MUST be a string compatible scalar. \n\nThe default format, is: ISO 8601\nIf no format is chosen, the default format is used.\nCustom formats are allowed by specifying a format conforming to the Golang specification for specifying a date time format.\n\"\"\"\ndirective @injectCurrentDateTime(\n  format: WunderGraphDateTimeFormat = ISO8601\n  \"\"\"customFormat must conform to the Golang specification for specifying a date time format\"\"\"\n  customFormat: String\n) on VARIABLE_DEFINITION\n\n\"\"\"\nThe directive @injectGeneratedUUID injects a generated UUID into the variable.\nThis variable MUST be a string.\nAt the same time, it removes the variable from the input definition,\ndisallowing the user to supply it.\n\nThis means, the UUID is 100% generated server-side and can be considered untempered.\n\"\"\"\ndirective @injectGeneratedUUID on VARIABLE_DEFINITION\n\n\"\"\"\nThe @internalOperation Directive marks an Operation as internal.\nBy doing so, the Operation is no longer accessible from the public API.\nIt can only be accessed by internal services, like hooks.\n\"\"\"\ndirective @internalOperation on QUERY | MUTATION | SUBSCRIPTION\n\n\"\"\"The directive @injectEnvironmentVariable allows you to inject an environment variable into the variable definition.\"\"\"\ndirective @injectEnvironmentVariable(name: String!) on VARIABLE_DEFINITION\n\n\"\"\"\nThe @export directive instructs the Execution Planner to export the field during the execution into the variable of the 'as' argument.\nAs the execution is depth first, a field can only be used after it has been exported.\nAdditionally, a field can only be used after using the '_join' field or on a different data source.\nIt's not possible to export a field and use it in for the same data source.\n\nNote that the @export directive only works on fields that return a single value.\nIt's not possible to export a list or object field.\n\"\"\"\ndirective @export(\n  \"\"\"The argument 'as' is the name of the variable to export the field to.\"\"\"\n  as: String!\n) on FIELD\n\n\"\"\"\nThe directive @internal marks a variable definition as internal so that clients can't access it.\nThe field is also not visible in the public API.\nIt's only being used as an internal variable to export fields into.\n\"\"\"\ndirective @internal on VARIABLE_DEFINITION\n\n\"\"\"\nThe @transform directive allows to apply transformations to the response.\nBy applying the directive, the shape of the response can be altered,\nwhich will also modify the JSON-Schema of the response.\nThat is, you will keep full type safety and code-generation for transformed fields.\n\"\"\"\ndirective @transform(\n  \"\"\"\n  Using the 'get' transformation allows you to extract a nested field using a JSON path.\n  This is useful to unnest data, e.g. when using the '_join' field, which adds an extra layer of nesting.\n  \n  Example:\n  \n  query GetName {\n      name: me @transform(get: \"info.name\") {\n          info {\n              name\n          }\n      }\n  }\n  \n  Before the transformation, the resolve looks like this:\n  \n  {\n      \"name\": {\n          \"info\": {\n              \"name\": \"John Doe\"\n          }\n      }\n  }\n  \n  With the transformation applied, the response will be reshaped like this:\n  \n  {\n      \"name\": \"John Doe\"\n  }\n  \"\"\"\n  get: String\n) on FIELD\n\ninput db_NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: db_NestedIntFilter\n}\n\ninput db_IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: db_NestedIntFilter\n}\n\nenum db_QueryMode {\n  default\n  insensitive\n}\n\ninput db_NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: db_NestedStringFilter\n}\n\ninput db_StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: db_QueryMode\n  not: db_NestedStringFilter\n}\n\ninput db_NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: db_NestedDateTimeFilter\n}\n\ninput db_DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: db_NestedDateTimeFilter\n}\n\ninput db_MessagesListRelationFilter {\n  every: db_messagesWhereInput\n  some: db_messagesWhereInput\n  none: db_messagesWhereInput\n}\n\ninput db_usersWhereInput {\n  AND: db_usersWhereInput\n  OR: [db_usersWhereInput]\n  NOT: db_usersWhereInput\n  id: db_IntFilter\n  email: db_StringFilter\n  name: db_StringFilter\n  updatedat: db_DateTimeFilter\n  lastlogin: db_DateTimeFilter\n  messages: db_MessagesListRelationFilter\n}\n\ninput db_UsersRelationFilter {\n  is: db_usersWhereInput\n  isNot: db_usersWhereInput\n}\n\ninput db_messagesWhereInput {\n  AND: db_messagesWhereInput\n  OR: [db_messagesWhereInput]\n  NOT: db_messagesWhereInput\n  id: db_IntFilter\n  user_id: db_IntFilter\n  message: db_StringFilter\n  users: db_UsersRelationFilter\n}\n\nenum db_SortOrder {\n  asc\n  desc\n}\n\ninput db_messagesOrderByRelationAggregateInput {\n  _count: db_SortOrder\n}\n\ninput db_usersOrderByWithRelationInput {\n  id: db_SortOrder\n  email: db_SortOrder\n  name: db_SortOrder\n  updatedat: db_SortOrder\n  lastlogin: db_SortOrder\n  messages: db_messagesOrderByRelationAggregateInput\n}\n\ninput db_messagesOrderByWithRelationInput {\n  id: db_SortOrder\n  user_id: db_SortOrder\n  message: db_SortOrder\n  users: db_usersOrderByWithRelationInput\n}\n\ninput db_messagesWhereUniqueInput {\n  id: Int\n}\n\nenum db_MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype db_UsersCountOutputType {\n  messages: Int!\n  _join: Query!\n}\n\ntype db_users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: db_messagesWhereInput, orderBy: [db_messagesOrderByWithRelationInput], cursor: db_messagesWhereUniqueInput, take: Int, skip: Int, distinct: [db_MessagesScalarFieldEnum]): [db_messages]\n  _count: db_UsersCountOutputType\n  _join: Query!\n}\n\ntype db_messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: db_users!\n  _join: Query!\n}\n\ntype db_MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n  _join: Query!\n}\n\ntype db_MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n  _join: Query!\n}\n\ntype db_MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n  _join: Query!\n}\n\ntype db_MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n  _join: Query!\n}\n\ntype db_MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n  _join: Query!\n}\n\ntype db_AggregateMessages {\n  _count: db_MessagesCountAggregateOutputType\n  _avg: db_MessagesAvgAggregateOutputType\n  _sum: db_MessagesSumAggregateOutputType\n  _min: db_MessagesMinAggregateOutputType\n  _max: db_MessagesMaxAggregateOutputType\n  _join: Query!\n}\n\ninput db_messagesCountOrderByAggregateInput {\n  id: db_SortOrder\n  user_id: db_SortOrder\n  message: db_SortOrder\n}\n\ninput db_messagesAvgOrderByAggregateInput {\n  id: db_SortOrder\n  user_id: db_SortOrder\n}\n\ninput db_messagesMaxOrderByAggregateInput {\n  id: db_SortOrder\n  user_id: db_SortOrder\n  message: db_SortOrder\n}\n\ninput db_messagesMinOrderByAggregateInput {\n  id: db_SortOrder\n  user_id: db_SortOrder\n  message: db_SortOrder\n}\n\ninput db_messagesSumOrderByAggregateInput {\n  id: db_SortOrder\n  user_id: db_SortOrder\n}\n\ninput db_messagesOrderByWithAggregationInput {\n  id: db_SortOrder\n  user_id: db_SortOrder\n  message: db_SortOrder\n  _count: db_messagesCountOrderByAggregateInput\n  _avg: db_messagesAvgOrderByAggregateInput\n  _max: db_messagesMaxOrderByAggregateInput\n  _min: db_messagesMinOrderByAggregateInput\n  _sum: db_messagesSumOrderByAggregateInput\n}\n\ninput db_NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: db_NestedFloatFilter\n}\n\ninput db_NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: db_NestedIntWithAggregatesFilter\n  _count: db_NestedIntFilter\n  _avg: db_NestedFloatFilter\n  _sum: db_NestedIntFilter\n  _min: db_NestedIntFilter\n  _max: db_NestedIntFilter\n}\n\ninput db_IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: db_NestedIntWithAggregatesFilter\n  _count: db_NestedIntFilter\n  _avg: db_NestedFloatFilter\n  _sum: db_NestedIntFilter\n  _min: db_NestedIntFilter\n  _max: db_NestedIntFilter\n}\n\ninput db_NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: db_NestedStringWithAggregatesFilter\n  _count: db_NestedIntFilter\n  _min: db_NestedStringFilter\n  _max: db_NestedStringFilter\n}\n\ninput db_StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: db_QueryMode\n  not: db_NestedStringWithAggregatesFilter\n  _count: db_NestedIntFilter\n  _min: db_NestedStringFilter\n  _max: db_NestedStringFilter\n}\n\ninput db_messagesScalarWhereWithAggregatesInput {\n  AND: db_messagesScalarWhereWithAggregatesInput\n  OR: [db_messagesScalarWhereWithAggregatesInput]\n  NOT: db_messagesScalarWhereWithAggregatesInput\n  id: db_IntWithAggregatesFilter\n  user_id: db_IntWithAggregatesFilter\n  message: db_StringWithAggregatesFilter\n}\n\ntype db_MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: db_MessagesCountAggregateOutputType\n  _avg: db_MessagesAvgAggregateOutputType\n  _sum: db_MessagesSumAggregateOutputType\n  _min: db_MessagesMinAggregateOutputType\n  _max: db_MessagesMaxAggregateOutputType\n  _join: Query!\n}\n\ninput db_usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum db_UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype db_UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n  _join: Query!\n}\n\ntype db_UsersAvgAggregateOutputType {\n  id: Float\n  _join: Query!\n}\n\ntype db_UsersSumAggregateOutputType {\n  id: Int\n  _join: Query!\n}\n\ntype db_UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n  _join: Query!\n}\n\ntype db_UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n  _join: Query!\n}\n\ntype db_AggregateUsers {\n  _count: db_UsersCountAggregateOutputType\n  _avg: db_UsersAvgAggregateOutputType\n  _sum: db_UsersSumAggregateOutputType\n  _min: db_UsersMinAggregateOutputType\n  _max: db_UsersMaxAggregateOutputType\n  _join: Query!\n}\n\ninput db_usersCountOrderByAggregateInput {\n  id: db_SortOrder\n  email: db_SortOrder\n  name: db_SortOrder\n  updatedat: db_SortOrder\n  lastlogin: db_SortOrder\n}\n\ninput db_usersAvgOrderByAggregateInput {\n  id: db_SortOrder\n}\n\ninput db_usersMaxOrderByAggregateInput {\n  id: db_SortOrder\n  email: db_SortOrder\n  name: db_SortOrder\n  updatedat: db_SortOrder\n  lastlogin: db_SortOrder\n}\n\ninput db_usersMinOrderByAggregateInput {\n  id: db_SortOrder\n  email: db_SortOrder\n  name: db_SortOrder\n  updatedat: db_SortOrder\n  lastlogin: db_SortOrder\n}\n\ninput db_usersSumOrderByAggregateInput {\n  id: db_SortOrder\n}\n\ninput db_usersOrderByWithAggregationInput {\n  id: db_SortOrder\n  email: db_SortOrder\n  name: db_SortOrder\n  updatedat: db_SortOrder\n  lastlogin: db_SortOrder\n  _count: db_usersCountOrderByAggregateInput\n  _avg: db_usersAvgOrderByAggregateInput\n  _max: db_usersMaxOrderByAggregateInput\n  _min: db_usersMinOrderByAggregateInput\n  _sum: db_usersSumOrderByAggregateInput\n}\n\ninput db_NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: db_NestedDateTimeWithAggregatesFilter\n  _count: db_NestedIntFilter\n  _min: db_NestedDateTimeFilter\n  _max: db_NestedDateTimeFilter\n}\n\ninput db_DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: db_NestedDateTimeWithAggregatesFilter\n  _count: db_NestedIntFilter\n  _min: db_NestedDateTimeFilter\n  _max: db_NestedDateTimeFilter\n}\n\ninput db_usersScalarWhereWithAggregatesInput {\n  AND: db_usersScalarWhereWithAggregatesInput\n  OR: [db_usersScalarWhereWithAggregatesInput]\n  NOT: db_usersScalarWhereWithAggregatesInput\n  id: db_IntWithAggregatesFilter\n  email: db_StringWithAggregatesFilter\n  name: db_StringWithAggregatesFilter\n  updatedat: db_DateTimeWithAggregatesFilter\n  lastlogin: db_DateTimeWithAggregatesFilter\n}\n\ntype db_UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: db_UsersCountAggregateOutputType\n  _avg: db_UsersAvgAggregateOutputType\n  _sum: db_UsersSumAggregateOutputType\n  _min: db_UsersMinAggregateOutputType\n  _max: db_UsersMaxAggregateOutputType\n  _join: Query!\n}\n\ntype Query {\n  db_findFirstmessages(where: db_messagesWhereInput, orderBy: [db_messagesOrderByWithRelationInput], cursor: db_messagesWhereUniqueInput, take: Int, skip: Int, distinct: [db_MessagesScalarFieldEnum]): db_messages\n  db_findManymessages(where: db_messagesWhereInput, orderBy: [db_messagesOrderByWithRelationInput], cursor: db_messagesWhereUniqueInput, take: Int, skip: Int, distinct: [db_MessagesScalarFieldEnum]): [db_messages]!\n  db_aggregatemessages(where: db_messagesWhereInput, orderBy: [db_messagesOrderByWithRelationInput], cursor: db_messagesWhereUniqueInput, take: Int, skip: Int): db_AggregateMessages!\n  db_groupBymessages(where: db_messagesWhereInput, orderBy: [db_messagesOrderByWithAggregationInput], by: [db_MessagesScalarFieldEnum]!, having: db_messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_MessagesGroupByOutputType]!\n  db_findUniquemessages(where: db_messagesWhereUniqueInput!): db_messages\n  db_findFirstusers(where: db_usersWhereInput, orderBy: [db_usersOrderByWithRelationInput], cursor: db_usersWhereUniqueInput, take: Int, skip: Int, distinct: [db_UsersScalarFieldEnum]): db_users\n  db_findManyusers(where: db_usersWhereInput, orderBy: [db_usersOrderByWithRelationInput], cursor: db_usersWhereUniqueInput, take: Int, skip: Int, distinct: [db_UsersScalarFieldEnum]): [db_users]!\n  db_aggregateusers(where: db_usersWhereInput, orderBy: [db_usersOrderByWithRelationInput], cursor: db_usersWhereUniqueInput, take: Int, skip: Int): db_AggregateUsers!\n  db_groupByusers(where: db_usersWhereInput, orderBy: [db_usersOrderByWithAggregationInput], by: [db_UsersScalarFieldEnum]!, having: db_usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_UsersGroupByOutputType]!\n  db_findUniqueusers(where: db_usersWhereUniqueInput!): db_users\n}\n\ninput db_usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput db_usersCreateOrConnectWithoutMessagesInput {\n  where: db_usersWhereUniqueInput!\n  create: db_usersCreateWithoutMessagesInput!\n}\n\ninput db_usersCreateNestedOneWithoutMessagesInput {\n  create: db_usersCreateWithoutMessagesInput\n  connectOrCreate: db_usersCreateOrConnectWithoutMessagesInput\n  connect: db_usersWhereUniqueInput\n}\n\ninput db_messagesCreateInput {\n  message: String!\n  users: db_usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput db_StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput db_DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput db_usersUpdateWithoutMessagesInput {\n  email: db_StringFieldUpdateOperationsInput\n  name: db_StringFieldUpdateOperationsInput\n  updatedat: db_DateTimeFieldUpdateOperationsInput\n  lastlogin: db_DateTimeFieldUpdateOperationsInput\n}\n\ninput db_usersUpsertWithoutMessagesInput {\n  update: db_usersUpdateWithoutMessagesInput!\n  create: db_usersCreateWithoutMessagesInput!\n}\n\ninput db_usersUpdateOneRequiredWithoutMessagesInput {\n  create: db_usersCreateWithoutMessagesInput\n  connectOrCreate: db_usersCreateOrConnectWithoutMessagesInput\n  upsert: db_usersUpsertWithoutMessagesInput\n  connect: db_usersWhereUniqueInput\n  update: db_usersUpdateWithoutMessagesInput\n}\n\ninput db_messagesUpdateInput {\n  message: db_StringFieldUpdateOperationsInput\n  users: db_usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput db_messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype db_AffectedRowsOutput {\n  count: Int!\n  _join: Query!\n}\n\ninput db_messagesUpdateManyMutationInput {\n  message: db_StringFieldUpdateOperationsInput\n}\n\ninput db_messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput db_messagesCreateOrConnectWithoutUsersInput {\n  where: db_messagesWhereUniqueInput!\n  create: [db_messagesCreateWithoutUsersInput!]\n}\n\ninput db_messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput db_messagesCreateManyUsersInputEnvelope {\n  data: [db_messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput db_messagesCreateNestedManyWithoutUsersInput {\n  create: [db_messagesCreateWithoutUsersInput]\n  connectOrCreate: [db_messagesCreateOrConnectWithoutUsersInput]\n  createMany: [db_messagesCreateManyUsersInputEnvelope]\n  connect: [db_messagesWhereUniqueInput]\n}\n\ninput db_usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: db_messagesCreateNestedManyWithoutUsersInput\n}\n\ninput db_messagesUpdateWithoutUsersInput {\n  message: db_StringFieldUpdateOperationsInput\n}\n\ninput db_messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: db_messagesWhereUniqueInput!\n  update: [db_messagesUpdateWithoutUsersInput!]\n  create: [db_messagesCreateWithoutUsersInput!]\n}\n\ninput db_messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: db_messagesWhereUniqueInput!\n  data: db_messagesUpdateWithoutUsersInput!\n}\n\ninput db_messagesScalarWhereInput {\n  AND: db_messagesScalarWhereInput\n  OR: [db_messagesScalarWhereInput]\n  NOT: db_messagesScalarWhereInput\n  id: db_IntFilter\n  user_id: db_IntFilter\n  message: db_StringFilter\n}\n\ninput db_messagesUpdateManyWithWhereWithoutUsersInput {\n  where: db_messagesScalarWhereInput!\n  data: db_messagesUpdateManyMutationInput!\n}\n\ninput db_messagesUpdateManyWithoutUsersInput {\n  create: [db_messagesCreateWithoutUsersInput]\n  connectOrCreate: [db_messagesCreateOrConnectWithoutUsersInput]\n  upsert: [db_messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [db_messagesCreateManyUsersInputEnvelope]\n  connect: [db_messagesWhereUniqueInput]\n  set: db_messagesWhereUniqueInput\n  disconnect: [db_messagesWhereUniqueInput]\n  delete: [db_messagesWhereUniqueInput]\n  update: [db_messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [db_messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: db_messagesScalarWhereInput\n}\n\ninput db_usersUpdateInput {\n  email: db_StringFieldUpdateOperationsInput\n  name: db_StringFieldUpdateOperationsInput\n  updatedat: db_DateTimeFieldUpdateOperationsInput\n  lastlogin: db_DateTimeFieldUpdateOperationsInput\n  messages: db_messagesUpdateManyWithoutUsersInput\n}\n\ninput db_usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput db_usersUpdateManyMutationInput {\n  email: db_StringFieldUpdateOperationsInput\n  name: db_StringFieldUpdateOperationsInput\n  updatedat: db_DateTimeFieldUpdateOperationsInput\n  lastlogin: db_DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  db_createOnemessages(data: db_messagesCreateInput!): db_messages\n  db_upsertOnemessages(where: db_messagesWhereUniqueInput!, create: db_messagesCreateInput!, update: db_messagesUpdateInput!): db_messages\n  db_createManymessages(data: [db_messagesCreateManyInput]!, skipDuplicates: Boolean): db_AffectedRowsOutput\n  db_deleteOnemessages(where: db_messagesWhereUniqueInput!): db_messages\n  db_updateOnemessages(data: db_messagesUpdateInput!, where: db_messagesWhereUniqueInput!): db_messages\n  db_updateManymessages(data: db_messagesUpdateManyMutationInput!, where: db_messagesWhereInput): db_AffectedRowsOutput\n  db_deleteManymessages(where: db_messagesWhereInput): db_AffectedRowsOutput\n  db_createOneusers(data: db_usersCreateInput!): db_users\n  db_upsertOneusers(where: db_usersWhereUniqueInput!, create: db_usersCreateInput!, update: db_usersUpdateInput!): db_users\n  db_createManyusers(data: [db_usersCreateManyInput]!, skipDuplicates: Boolean): db_AffectedRowsOutput\n  db_deleteOneusers(where: db_usersWhereUniqueInput!): db_users\n  db_updateOneusers(data: db_usersUpdateInput!, where: db_usersWhereUniqueInput!): db_users\n  db_updateManyusers(data: db_usersUpdateManyMutationInput!, where: db_usersWhereInput): db_AffectedRowsOutput\n  db_deleteManyusers(where: db_usersWhereInput): db_AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nenum Claim {\n  EMAIL\n  EMAIL_VERIFIED\n  NAME\n  NICKNAME\n  LOCATION\n  PROVIDER\n}\n\nenum COMMON_REGEX_PATTERN {\n  EMAIL\n  DOMAIN\n}\n\nenum WG_ROLE {\n  user\n  superadmin\n}\n\nenum WunderGraphDateTimeFormat {\n  \"\"\"2006-01-02T15:04:05-0700\"\"\"\n  ISO8601\n  \"\"\"Mon Jan _2 15:04:05 2006\"\"\"\n  ANSIC\n  \"\"\"Mon Jan _2 15:04:05 MST 2006\"\"\"\n  UnixDate\n  \"\"\"Mon Jan 02 15:04:05 -0700 2006\"\"\"\n  RubyDate\n  \"\"\"02 Jan 06 15:04 MST\"\"\"\n  RFC822\n  \"\"\"02 Jan 06 15:04 -0700\"\"\"\n  RFC822Z\n  \"\"\"Monday, 02-Jan-06 15:04:05 MST\"\"\"\n  RFC850\n  \"\"\"Mon, 02 Jan 2006 15:04:05 MST\"\"\"\n  RFC1123\n  \"\"\"Mon, 02 Jan 2006 15:04:05 -0700\"\"\"\n  RFC1123Z\n  \"\"\"2006-01-02T15:04:05Z07:00\"\"\"\n  RFC3339\n  \"\"\"2006-01-02T15:04:05.999999999Z07:00\"\"\"\n  RFC3339Nano\n  \"\"\"3:04PM\"\"\"\n  Kitchen\n  \"\"\"Jan _2 15:04:05\"\"\"\n  Stamp\n  \"\"\"Jan _2 15:04:05.000\"\"\"\n  StampMilli\n  \"\"\"Jan _2 15:04:05.000000\"\"\"\n  StampMicro\n  \"\"\"Jan _2 15:04:05.000000000\"\"\"\n  StampNano\n}\n",
      "datasourceConfigurations": [
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_findFirstmessages"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_findManymessages"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_aggregatemessages"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_groupBymessages"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_findUniquemessages"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_findFirstusers"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_findManyusers"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_aggregateusers"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_groupByusers"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "db_findUniqueusers"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_createOnemessages"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_upsertOnemessages"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_createManymessages"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_deleteOnemessages"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_updateOnemessages"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_updateManymessages"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_deleteManymessages"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_createOneusers"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_upsertOneusers"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_createManyusers"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_deleteOneusers"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_updateOneusers"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_updateManyusers"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "db_deleteManyusers"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "db_users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "db_messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_all"
              ]
            },
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin"
              ]
            },
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "updatedat",
                "lastlogin",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:54322/example?schema=public"
            },
            "prismaSchema": "model messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique\n  name      String\n  updatedat DateTime   @default(now()) @db.Timestamptz(6)\n  lastlogin DateTime   @default(now()) @db.Timestamptz(6)\n  messages  messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  updatedat: DateTimeFilter\n  lastlogin: DateTimeFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n  updatedat\n  lastlogin\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  updatedat: Int!\n  lastlogin: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  updatedat: SortOrder\n  lastlogin: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  updatedat: DateTimeWithAggregatesFilter\n  lastlogin: DateTimeWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  updatedat: DateTime!\n  lastlogin: DateTime!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: [messagesUpdateWithoutUsersInput!]\n  create: [messagesCreateWithoutUsersInput!]\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: [messagesCreateWithoutUsersInput]\n  connectOrCreate: [messagesCreateOrConnectWithoutUsersInput]\n  upsert: [messagesUpsertWithWhereUniqueWithoutUsersInput]\n  createMany: [messagesCreateManyUsersInputEnvelope]\n  connect: [messagesWhereUniqueInput]\n  set: messagesWhereUniqueInput\n  disconnect: [messagesWhereUniqueInput]\n  delete: [messagesWhereUniqueInput]\n  update: [messagesUpdateWithWhereUniqueWithoutUsersInput]\n  updateMany: [messagesUpdateManyWithWhereWithoutUsersInput]\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n  updatedat: DateTime\n  lastlogin: DateTime\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  updatedat: DateTimeFieldUpdateOperationsInput\n  lastlogin: DateTimeFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_UsersCountOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_users",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_messages",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_MessagesCountAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_MessagesAvgAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_MessagesSumAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_MessagesMinAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_MessagesMaxAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_AggregateMessages",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_MessagesGroupByOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_UsersCountAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_UsersAvgAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_UsersSumAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_UsersMinAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_UsersMaxAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_AggregateUsers",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_UsersGroupByOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "db_AffectedRowsOutput",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        }
      ],
      "fieldConfigurations": [
        {
          "typeName": "db_users",
          "fieldName": "messages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_findFirstmessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findFirstmessages"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_findManymessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findManymessages"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_aggregatemessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "aggregatemessages"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_groupBymessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "by",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "having",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "groupBymessages"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_findUniquemessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findUniquemessages"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_findFirstusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findFirstusers"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_findManyusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findManyusers"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_aggregateusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "aggregateusers"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_groupByusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "by",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "having",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "groupByusers"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "db_findUniqueusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findUniqueusers"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_createOnemessages",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "createOnemessages"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_upsertOnemessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "create",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "update",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "upsertOnemessages"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_createManymessages",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skipDuplicates",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "createManymessages"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_deleteOnemessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "deleteOnemessages"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_updateOnemessages",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "updateOnemessages"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_updateManymessages",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "updateManymessages"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_deleteManymessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "deleteManymessages"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_createOneusers",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "createOneusers"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_upsertOneusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "create",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "update",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "upsertOneusers"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_createManyusers",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skipDuplicates",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "createManyusers"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_deleteOneusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "deleteOneusers"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_updateOneusers",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "updateOneusers"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_updateManyusers",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "updateManyusers"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "db_deleteManyusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "deleteManyusers"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_UsersCountOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_users",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_messages",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_MessagesCountAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_MessagesAvgAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_MessagesSumAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_MessagesMinAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_MessagesMaxAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_AggregateMessages",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_MessagesGroupByOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_UsersCountAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_UsersAvgAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_UsersSumAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_UsersMinAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_UsersMaxAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_AggregateUsers",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_UsersGroupByOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "db_AffectedRowsOutput",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        }
      ],
      "typeConfigurations": [
        {
          "typeName": "db_NestedIntFilter",
          "renameTo": "NestedIntFilter"
        },
        {
          "typeName": "db_IntFilter",
          "renameTo": "IntFilter"
        },
        {
          "typeName": "db_QueryMode",
          "renameTo": "QueryMode"
        },
        {
          "typeName": "db_NestedStringFilter",
          "renameTo": "NestedStringFilter"
        },
        {
          "typeName": "db_StringFilter",
          "renameTo": "StringFilter"
        },
        {
          "typeName": "db_NestedDateTimeFilter",
          "renameTo": "NestedDateTimeFilter"
        },
        {
          "typeName": "db_DateTimeFilter",
          "renameTo": "DateTimeFilter"
        },
        {
          "typeName": "db_MessagesListRelationFilter",
          "renameTo": "MessagesListRelationFilter"
        },
        {
          "typeName": "db_usersWhereInput",
          "renameTo": "usersWhereInput"
        },
        {
          "typeName": "db_UsersRelationFilter",
          "renameTo": "UsersRelationFilter"
        },
        {
          "typeName": "db_messagesWhereInput",
          "renameTo": "messagesWhereInput"
        },
        {
          "typeName": "db_SortOrder",
          "renameTo": "SortOrder"
        },
        {
          "typeName": "db_messagesOrderByRelationAggregateInput",
          "renameTo": "messagesOrderByRelationAggregateInput"
        },
        {
          "typeName": "db_usersOrderByWithRelationInput",
          "renameTo": "usersOrderByWithRelationInput"
        },
        {
          "typeName": "db_messagesOrderByWithRelationInput",
          "renameTo": "messagesOrderByWithRelationInput"
        },
        {
          "typeName": "db_messagesWhereUniqueInput",
          "renameTo": "messagesWhereUniqueInput"
        },
        {
          "typeName": "db_MessagesScalarFieldEnum",
          "renameTo": "MessagesScalarFieldEnum"
        },
        {
          "typeName": "db_UsersCountOutputType",
          "renameTo": "UsersCountOutputType"
        },
        {
          "typeName": "db_users",
          "renameTo": "users"
        },
        {
          "typeName": "db_messages",
          "renameTo": "messages"
        },
        {
          "typeName": "db_MessagesCountAggregateOutputType",
          "renameTo": "MessagesCountAggregateOutputType"
        },
        {
          "typeName": "db_MessagesAvgAggregateOutputType",
          "renameTo": "MessagesAvgAggregateOutputType"
        },
        {
          "typeName": "db_MessagesSumAggregateOutputType",
          "renameTo": "MessagesSumAggregateOutputType"
        },
        {
          "typeName": "db_MessagesMinAggregateOutputType",
          "renameTo": "MessagesMinAggregateOutputType"
        },
        {
          "typeName": "db_MessagesMaxAggregateOutputType",
          "renameTo": "MessagesMaxAggregateOutputType"
        },
        {
          "typeName": "db_AggregateMessages",
          "renameTo": "AggregateMessages"
        },
        {
          "typeName": "db_messagesCountOrderByAggregateInput",
          "renameTo": "messagesCountOrderByAggregateInput"
        },
        {
          "typeName": "db_messagesAvgOrderByAggregateInput",
          "renameTo": "messagesAvgOrderByAggregateInput"
        },
        {
          "typeName": "db_messagesMaxOrderByAggregateInput",
          "renameTo": "messagesMaxOrderByAggregateInput"
        },
        {
          "typeName": "db_messagesMinOrderByAggregateInput",
          "renameTo": "messagesMinOrderByAggregateInput"
        },
        {
          "typeName": "db_messagesSumOrderByAggregateInput",
          "renameTo": "messagesSumOrderByAggregateInput"
        },
        {
          "typeName": "db_messagesOrderByWithAggregationInput",
          "renameTo": "messagesOrderByWithAggregationInput"
        },
        {
          "typeName": "db_NestedFloatFilter",
          "renameTo": "NestedFloatFilter"
        },
        {
          "typeName": "db_NestedIntWithAggregatesFilter",
          "renameTo": "NestedIntWithAggregatesFilter"
        },
        {
          "typeName": "db_IntWithAggregatesFilter",
          "renameTo": "IntWithAggregatesFilter"
        },
        {
          "typeName": "db_NestedStringWithAggregatesFilter",
          "renameTo": "NestedStringWithAggregatesFilter"
        },
        {
          "typeName": "db_StringWithAggregatesFilter",
          "renameTo": "StringWithAggregatesFilter"
        },
        {
          "typeName": "db_messagesScalarWhereWithAggregatesInput",
          "renameTo": "messagesScalarWhereWithAggregatesInput"
        },
        {
          "typeName": "db_MessagesGroupByOutputType",
          "renameTo": "MessagesGroupByOutputType"
        },
        {
          "typeName": "db_usersWhereUniqueInput",
          "renameTo": "usersWhereUniqueInput"
        },
        {
          "typeName": "db_UsersScalarFieldEnum",
          "renameTo": "UsersScalarFieldEnum"
        },
        {
          "typeName": "db_UsersCountAggregateOutputType",
          "renameTo": "UsersCountAggregateOutputType"
        },
        {
          "typeName": "db_UsersAvgAggregateOutputType",
          "renameTo": "UsersAvgAggregateOutputType"
        },
        {
          "typeName": "db_UsersSumAggregateOutputType",
          "renameTo": "UsersSumAggregateOutputType"
        },
        {
          "typeName": "db_UsersMinAggregateOutputType",
          "renameTo": "UsersMinAggregateOutputType"
        },
        {
          "typeName": "db_UsersMaxAggregateOutputType",
          "renameTo": "UsersMaxAggregateOutputType"
        },
        {
          "typeName": "db_AggregateUsers",
          "renameTo": "AggregateUsers"
        },
        {
          "typeName": "db_usersCountOrderByAggregateInput",
          "renameTo": "usersCountOrderByAggregateInput"
        },
        {
          "typeName": "db_usersAvgOrderByAggregateInput",
          "renameTo": "usersAvgOrderByAggregateInput"
        },
        {
          "typeName": "db_usersMaxOrderByAggregateInput",
          "renameTo": "usersMaxOrderByAggregateInput"
        },
        {
          "typeName": "db_usersMinOrderByAggregateInput",
          "renameTo": "usersMinOrderByAggregateInput"
        },
        {
          "typeName": "db_usersSumOrderByAggregateInput",
          "renameTo": "usersSumOrderByAggregateInput"
        },
        {
          "typeName": "db_usersOrderByWithAggregationInput",
          "renameTo": "usersOrderByWithAggregationInput"
        },
        {
          "typeName": "db_NestedDateTimeWithAggregatesFilter",
          "renameTo": "NestedDateTimeWithAggregatesFilter"
        },
        {
          "typeName": "db_DateTimeWithAggregatesFilter",
          "renameTo": "DateTimeWithAggregatesFilter"
        },
        {
          "typeName": "db_usersScalarWhereWithAggregatesInput",
          "renameTo": "usersScalarWhereWithAggregatesInput"
        },
        {
          "typeName": "db_UsersGroupByOutputType",
          "renameTo": "UsersGroupByOutputType"
        },
        {
          "typeName": "db_usersCreateWithoutMessagesInput",
          "renameTo": "usersCreateWithoutMessagesInput"
        },
        {
          "typeName": "db_usersCreateOrConnectWithoutMessagesInput",
          "renameTo": "usersCreateOrConnectWithoutMessagesInput"
        },
        {
          "typeName": "db_usersCreateNestedOneWithoutMessagesInput",
          "renameTo": "usersCreateNestedOneWithoutMessagesInput"
        },
        {
          "typeName": "db_messagesCreateInput",
          "renameTo": "messagesCreateInput"
        },
        {
          "typeName": "db_StringFieldUpdateOperationsInput",
          "renameTo": "StringFieldUpdateOperationsInput"
        },
        {
          "typeName": "db_DateTimeFieldUpdateOperationsInput",
          "renameTo": "DateTimeFieldUpdateOperationsInput"
        },
        {
          "typeName": "db_usersUpdateWithoutMessagesInput",
          "renameTo": "usersUpdateWithoutMessagesInput"
        },
        {
          "typeName": "db_usersUpsertWithoutMessagesInput",
          "renameTo": "usersUpsertWithoutMessagesInput"
        },
        {
          "typeName": "db_usersUpdateOneRequiredWithoutMessagesInput",
          "renameTo": "usersUpdateOneRequiredWithoutMessagesInput"
        },
        {
          "typeName": "db_messagesUpdateInput",
          "renameTo": "messagesUpdateInput"
        },
        {
          "typeName": "db_messagesCreateManyInput",
          "renameTo": "messagesCreateManyInput"
        },
        {
          "typeName": "db_AffectedRowsOutput",
          "renameTo": "AffectedRowsOutput"
        },
        {
          "typeName": "db_messagesUpdateManyMutationInput",
          "renameTo": "messagesUpdateManyMutationInput"
        },
        {
          "typeName": "db_messagesCreateWithoutUsersInput",
          "renameTo": "messagesCreateWithoutUsersInput"
        },
        {
          "typeName": "db_messagesCreateOrConnectWithoutUsersInput",
          "renameTo": "messagesCreateOrConnectWithoutUsersInput"
        },
        {
          "typeName": "db_messagesCreateManyUsersInput",
          "renameTo": "messagesCreateManyUsersInput"
        },
        {
          "typeName": "db_messagesCreateManyUsersInputEnvelope",
          "renameTo": "messagesCreateManyUsersInputEnvelope"
        },
        {
          "typeName": "db_messagesCreateNestedManyWithoutUsersInput",
          "renameTo": "messagesCreateNestedManyWithoutUsersInput"
        },
        {
          "typeName": "db_usersCreateInput",
          "renameTo": "usersCreateInput"
        },
        {
          "typeName": "db_messagesUpdateWithoutUsersInput",
          "renameTo": "messagesUpdateWithoutUsersInput"
        },
        {
          "typeName": "db_messagesUpsertWithWhereUniqueWithoutUsersInput",
          "renameTo": "messagesUpsertWithWhereUniqueWithoutUsersInput"
        },
        {
          "typeName": "db_messagesUpdateWithWhereUniqueWithoutUsersInput",
          "renameTo": "messagesUpdateWithWhereUniqueWithoutUsersInput"
        },
        {
          "typeName": "db_messagesScalarWhereInput",
          "renameTo": "messagesScalarWhereInput"
        },
        {
          "typeName": "db_messagesUpdateManyWithWhereWithoutUsersInput",
          "renameTo": "messagesUpdateManyWithWhereWithoutUsersInput"
        },
        {
          "typeName": "db_messagesUpdateManyWithoutUsersInput",
          "renameTo": "messagesUpdateManyWithoutUsersInput"
        },
        {
          "typeName": "db_usersUpdateInput",
          "renameTo": "usersUpdateInput"
        },
        {
          "typeName": "db_usersCreateManyInput",
          "renameTo": "usersCreateManyInput"
        },
        {
          "typeName": "db_usersUpdateManyMutationInput",
          "renameTo": "usersUpdateManyMutationInput"
        }
      ]
    },
    "s3UploadConfiguration": [],
    "corsConfiguration": {
      "maxAge": 120,
      "allowedHeaders": [
        "*"
      ],
      "allowedMethods": [
        "GET",
        "POST"
      ],
      "exposedHeaders": [
        "*"
      ],
      "allowCredentials": true,
      "allowedOrigins": [
        {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": "http://localhost:3000"
        }
      ]
    },
    "authenticationConfig": {
      "cookieBased": {
        "providers": [
          {
            "kind": 0,
            "githubConfig": {
              "clientId": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": "demo"
              },
              "clientSecret": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": "demo"
              }
            },
            "id": "github"
          }
        ],
        "authorizedRedirectUris": [
          {
            "kind": 0,
            "environmentVariableDefaultValue": "",
            "environmentVariableName": "",
            "placeholderVariableName": "",
            "staticVariableContent": "http://localhost:3000"
          }
        ],
        "authorizedRedirectUriRegexes": []
      },
      "hooks": {
        "postAuthentication": true,
        "mutatingPostAuthentication": true,
        "revalidateAuthentication": false
      },
      "jwksBased": {
        "providers": []
      }
    },
    "additionalHostNames": []
  },
  "dangerouslyEnableGraphQLEndpoint": false
}