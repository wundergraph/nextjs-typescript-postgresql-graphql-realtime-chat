// Code generated by wunderctl. DO NOT EDIT.

export interface LinkDefinition {
	targetType: string;
	targetFieldName: string;
	sourceField: string;
	argumentSources: LinkFieldArgumentSourceDefinition[];
}

export interface LinkFieldArgumentSourceDefinition {
	name: string;
	type: "objectField" | "fieldArgument";
	path: string[];
}

class LinkBuilder<T, R extends {} = {}, TT = {}> {
	// @ts-ignore
	constructor(current: R = {}, sourceField: string, targetType: string, targetField: string) {
		this.current = current;
		this.sourceField = sourceField;
		this.targetType = targetType;
		this.targetField = targetField;
	}

	private readonly sourceField: string;
	private readonly targetType: string;
	private readonly targetField: string;

	// @ts-ignore
	private current: R = {};

	argument<P extends Exclude<keyof T, keyof R>, V extends T[P], S extends "fieldArgument" | "objectField">(
		key: P,
		source: S,
		value: S extends "fieldArgument" ? string : TT,
		...extraPath: string[]
	) {
		const extra: {} = { [key]: { source, path: [value, ...extraPath] } };

		const instance = {
			...(this.current as object),
			...extra,
		} as R & Pick<T, P>;

		return new LinkBuilder<T, R & Pick<T, P>, TT>(instance, this.sourceField, this.targetType, this.targetField);
	}

	build = (): LinkDefinition => {
		const args = this.current as { [key: string]: { path: string[]; source: "fieldArgument" | "objectField" } };
		return {
			argumentSources: Object.keys(args).map((key) => ({
				name: key,
				type: args[key].source,
				path: args[key].path,
			})),
			targetType: this.targetType,
			sourceField: this.sourceField,
			targetFieldName: this.targetField,
		};
	};
}

export const sourceStep = <T extends {}, R extends {}>() => ({
	source: <F extends keyof T>(field: F) => {
		return targetStep<T, F, R>(field);
	},
});

const targetStep = <T, F extends keyof T, R>(field: F) => ({
	target: <r extends keyof R>(targetType: r, targetField: string) => {
		return new LinkBuilder<T[F], {}, R[r]>({}, field as string, targetType as string, targetField);
	},
});

interface TargetTypes {
	countries_Country:
		| "code"
		| "name"
		| "native"
		| "phone"
		| "continent"
		| "capital"
		| "currency"
		| "languages"
		| "emoji"
		| "emojiU"
		| "states"
		| "_join";
	countries_Continent: "code" | "name" | "countries" | "_join";
	countries_Language: "code" | "name" | "native" | "rtl" | "_join";
	countries_State: "code" | "name" | "country" | "_join";
	db_UsersCountOutputType: "messages" | "_join";
	db_users: "id" | "email" | "name" | "updatedat" | "lastlogin" | "messages" | "_count" | "_join";
	db_messages: "id" | "user_id" | "message" | "users" | "_join";
	db_MessagesCountAggregateOutputType: "id" | "user_id" | "message" | "_all" | "_join";
	db_MessagesAvgAggregateOutputType: "id" | "user_id" | "_join";
	db_MessagesSumAggregateOutputType: "id" | "user_id" | "_join";
	db_MessagesMinAggregateOutputType: "id" | "user_id" | "message" | "_join";
	db_MessagesMaxAggregateOutputType: "id" | "user_id" | "message" | "_join";
	db_AggregateMessages: "_count" | "_avg" | "_sum" | "_min" | "_max" | "_join";
	db_MessagesGroupByOutputType: "id" | "user_id" | "message" | "_count" | "_avg" | "_sum" | "_min" | "_max" | "_join";
	db_UsersCountAggregateOutputType: "id" | "email" | "name" | "updatedat" | "lastlogin" | "_all" | "_join";
	db_UsersAvgAggregateOutputType: "id" | "_join";
	db_UsersSumAggregateOutputType: "id" | "_join";
	db_UsersMinAggregateOutputType: "id" | "email" | "name" | "updatedat" | "lastlogin" | "_join";
	db_UsersMaxAggregateOutputType: "id" | "email" | "name" | "updatedat" | "lastlogin" | "_join";
	db_AggregateUsers: "_count" | "_avg" | "_sum" | "_min" | "_max" | "_join";
	db_UsersGroupByOutputType:
		| "id"
		| "email"
		| "name"
		| "updatedat"
		| "lastlogin"
		| "_count"
		| "_avg"
		| "_sum"
		| "_min"
		| "_max"
		| "_join";
	db_AffectedRowsOutput: "count" | "_join";
}

interface SourceFields {
	countries_countries: {
		filter: null;
	};
	countries_country: {
		code: null;
	};
	countries_continents: {
		filter: null;
	};
	countries_continent: {
		code: null;
	};
	countries_languages: {
		filter: null;
	};
	countries_language: {
		code: null;
	};
	db_findFirstmessages: {
		where: null;
		orderBy: null;
		cursor: null;
		take: null;
		skip: null;
		distinct: null;
	};
	db_findManymessages: {
		where: null;
		orderBy: null;
		cursor: null;
		take: null;
		skip: null;
		distinct: null;
	};
	db_aggregatemessages: {
		where: null;
		orderBy: null;
		cursor: null;
		take: null;
		skip: null;
	};
	db_groupBymessages: {
		where: null;
		orderBy: null;
		by: null;
		having: null;
		take: null;
		skip: null;
	};
	db_findUniquemessages: {
		where: null;
	};
	db_findFirstusers: {
		where: null;
		orderBy: null;
		cursor: null;
		take: null;
		skip: null;
		distinct: null;
	};
	db_findManyusers: {
		where: null;
		orderBy: null;
		cursor: null;
		take: null;
		skip: null;
		distinct: null;
	};
	db_aggregateusers: {
		where: null;
		orderBy: null;
		cursor: null;
		take: null;
		skip: null;
	};
	db_groupByusers: {
		where: null;
		orderBy: null;
		by: null;
		having: null;
		take: null;
		skip: null;
	};
	db_findUniqueusers: {
		where: null;
	};
}

const linkBuilder = sourceStep<SourceFields, TargetTypes>();
export default linkBuilder;
