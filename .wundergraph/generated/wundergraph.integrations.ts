import {resolveIntegration,Api,EnvironmentVariable} from "@wundergraph/sdk";

export const integrations = {
    wundergraph: {
        weather: (config?: {
            apiNamespace?: string;
        }): Promise<Api<any>> => {
            const raw = '{\"organization\":\"wundergraph\",\"name\":\"weather\",\"keywords\":[\"weather\"],\"shortDescription\":\"Weather API\",\"markdownDescription\":\"\",\"repositoryUrl\":\"\",\"sdkVersion\":\"\",\"definition\":{\"DataSources\":[{\"ChildNodes\":[{\"fieldNames\":[\"id\",\"name\",\"country\",\"coord\",\"weather\"],\"typeName\":\"City\"},{\"fieldNames\":[\"lon\",\"lat\"],\"typeName\":\"Coordinates\"},{\"fieldNames\":[\"title\",\"description\",\"icon\"],\"typeName\":\"Summary\"},{\"fieldNames\":[\"actual\",\"feelsLike\",\"min\",\"max\"],\"typeName\":\"Temperature\"},{\"fieldNames\":[\"speed\",\"deg\"],\"typeName\":\"Wind\"},{\"fieldNames\":[\"all\",\"visibility\",\"humidity\"],\"typeName\":\"Clouds\"},{\"fieldNames\":[\"summary\",\"temperature\",\"wind\",\"clouds\",\"timestamp\"],\"typeName\":\"Weather\"}],\"Custom\":{\"Federation\":{\"Enabled\":false,\"ServiceSDL\":\"\"},\"Fetch\":{\"body\":{\"environmentVariableDefaultValue\":\"\",\"environmentVariableName\":\"\",\"kind\":0,\"placeholderVariableName\":\"\",\"staticVariableContent\":\"\"},\"header\":{},\"method\":1,\"query\":[],\"url\":{\"environmentVariableDefaultValue\":\"\",\"environmentVariableName\":\"\",\"kind\":0,\"placeholderVariableName\":\"\",\"staticVariableContent\":\"https://graphql-weather-api.herokuapp.com/\"},\"urlEncodeBody\":false},\"Subscription\":{\"Enabled\":false,\"URL\":{\"environmentVariableDefaultValue\":\"\",\"environmentVariableName\":\"\",\"kind\":0,\"placeholderVariableName\":\"\",\"staticVariableContent\":\"wss://graphql-weather-api.herokuapp.com/\"}},\"UpstreamSchema\":\"directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE\\n\\ntype City {\\n  id: ID\\n  name: String\\n  country: String\\n  coord: Coordinates\\n  weather: Weather\\n}\\n\\ntype Coordinates {\\n  lon: Float\\n  lat: Float\\n}\\n\\ntype Summary {\\n  title: String\\n  description: String\\n  icon: String\\n}\\n\\ntype Temperature {\\n  actual: Float\\n  feelsLike: Float\\n  min: Float\\n  max: Float\\n}\\n\\ntype Wind {\\n  speed: Float\\n  deg: Int\\n}\\n\\ntype Clouds {\\n  all: Int\\n  visibility: Int\\n  humidity: Int\\n}\\n\\ntype Weather {\\n  summary: Summary\\n  temperature: Temperature\\n  wind: Wind\\n  clouds: Clouds\\n  timestamp: Int\\n}\\n\\ninput ConfigInput {\\n  units: Unit\\n  lang: Language\\n}\\n\\ntype Query {\\n  getCityByName(name: String!, country: String, config: ConfigInput): City\\n  getCityById(id: [String!], config: ConfigInput): [City]\\n}\\n\\nenum Unit {\\n  metric\\n  imperial\\n  kelvin\\n}\\n\\nenum Language {\\n  af\\n  al\\n  ar\\n  az\\n  bg\\n  ca\\n  cz\\n  da\\n  de\\n  el\\n  en\\n  eu\\n  fa\\n  fi\\n  fr\\n  gl\\n  he\\n  hi\\n  hr\\n  hu\\n  id\\n  it\\n  ja\\n  kr\\n  la\\n  lt\\n  mk\\n  no\\n  nl\\n  pl\\n  pt\\n  pt_br\\n  ro\\n  ru\\n  sv\\n  se\\n  sk\\n  sl\\n  sp\\n  es\\n  sr\\n  th\\n  tr\\n  ua\\n  uk\\n  vi\\n  zh_cn\\n  zh_tw\\n  zu\\n}\\n\\nenum CacheControlScope {\\n  PUBLIC\\n  PRIVATE\\n}\\n\\n\\\"\\\"\\\"The `Upload` scalar type represents a file upload.\\\"\\\"\\\"\\nscalar Upload\\n\"},\"Directives\":[],\"Kind\":2,\"RootNodes\":[{\"fieldNames\":[\"getCityByName\",\"getCityById\"],\"typeName\":\"Query\"}]}],\"DefaultFlushInterval\":500,\"Fields\":[{\"argumentsConfiguration\":[{\"name\":\"name\",\"renderConfiguration\":0,\"sourcePath\":[],\"sourceType\":1},{\"name\":\"country\",\"renderConfiguration\":0,\"sourcePath\":[],\"sourceType\":1},{\"name\":\"config\",\"renderConfiguration\":0,\"sourcePath\":[],\"sourceType\":1}],\"disableDefaultFieldMapping\":false,\"fieldName\":\"getCityByName\",\"path\":[],\"requiresFields\":[],\"typeName\":\"Query\",\"unescapeResponseJson\":false},{\"argumentsConfiguration\":[{\"name\":\"id\",\"renderConfiguration\":0,\"sourcePath\":[],\"sourceType\":1},{\"name\":\"config\",\"renderConfiguration\":0,\"sourcePath\":[],\"sourceType\":1}],\"disableDefaultFieldMapping\":false,\"fieldName\":\"getCityById\",\"path\":[],\"requiresFields\":[],\"typeName\":\"Query\",\"unescapeResponseJson\":false}],\"Schema\":\"directive@cacheControl(maxAge:Int scope:CacheControlScope)on FIELD_DEFINITION|OBJECT|INTERFACE \\\"\\\"\\\"The directive @internal marks a variable definition as internal so that clients can\'t access it.\\nThe field is also not visible in the public API.\\nIt\'s only being used as an internal variable to export fields into.\\\"\\\"\\\" directive@internal on VARIABLE_DEFINITION \\\"\\\"\\\"The @transform directive allows to apply transformations to the response.\\nBy applying the directive, the shape of the response can be altered,\\nwhich will also modify the JSON-Schema of the response.\\nThat is, you will keep full type safety and code-generation for transformed fields.\\\"\\\"\\\" directive@transform(\\\"\\\"\\\"Using the \'get\' transformation allows you to extract a nested field using a JSON path.\\nThis is useful to unnest data, e.g. when using the \'_join\' field, which adds an extra layer of nesting.\\n\\nExample:\\n\\nquery GetName {\\n    name: me @transform(get: \\\"info.name\\\") {\\n        info {\\n            name\\n        }\\n    }\\n}\\n\\nBefore the transformation, the resolve looks like this:\\n\\n{\\n    \\\"name\\\": {\\n        \\\"info\\\": {\\n            \\\"name\\\": \\\"John Doe\\\"\\n        }\\n    }\\n}\\n\\nWith the transformation applied, the response will be reshaped like this:\\n\\n{\\n    \\\"name\\\": \\\"John Doe\\\"\\n}\\\"\\\"\\\" get:String)on FIELD type City{id:ID name:String country:String coord:Coordinates weather:Weather}type Coordinates{lon:Float lat:Float}type Summary{title:String description:String icon:String}type Temperature{actual:Float feelsLike:Float min:Float max:Float}type Wind{speed:Float deg:Int}type Clouds{all:Int visibility:Int humidity:Int}type Weather{summary:Summary temperature:Temperature wind:Wind clouds:Clouds timestamp:Int}input ConfigInput{units:Unit lang:Language}type Query{getCityByName(name:String!country:String config:ConfigInput):City getCityById(id:[String!]config:ConfigInput):[City]}enum Unit{metric imperial kelvin}enum Language{af al ar az bg ca cz da de el en eu fa fi fr gl he hi hr hu id it ja kr la lt mk no nl pl pt pt_br ro ru sv se sk sl sp es sr th tr ua uk vi zh_cn zh_tw zu}enum CacheControlScope{PUBLIC PRIVATE}\\\"\\\"\\\"The `Upload` scalar type represents a file upload.\\\"\\\"\\\" scalar Upload\",\"Types\":[],\"interpolateVariableDefinitionAsJSON\":[]},\"isPublic\":true,\"placeholders\":[]}';
			return resolveIntegration(raw,{},config?.apiNamespace)
        },
    },
}
