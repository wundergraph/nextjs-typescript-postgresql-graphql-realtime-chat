// Code generated by wunderctl. DO NOT EDIT.

import type {
	AddMessageResponse,
	AddMessageInput,
	AddMessageResponseData,
	AllUsersResponse,
	AllUsersInput,
	AllUsersResponseData,
	ChangeUserNameResponse,
	ChangeUserNameInput,
	ChangeUserNameResponseData,
	CountriesResponse,
	CountriesResponseData,
	DeleteAllMessagesByUserEmailResponse,
	DeleteAllMessagesByUserEmailInput,
	DeleteAllMessagesByUserEmailResponseData,
	GermanyResponse,
	GermanyResponseData,
	HelloResponse,
	HelloResponseData,
	MessagesResponse,
	MessagesResponseData,
	QueryResponse,
	QueryResponseData,
	UpdateUserResponse,
	UpdateUserInput,
	UpdateUserResponseData,
	UsResponse,
	UsResponseData,
	UserInfoResponse,
	UserInfoResponseData,
} from "./models";
import { createContext } from "react";
import {
	QueryArgsWithInput,
	SubscriptionArgs,
	SubscriptionArgsWithInput,
	hooks,
	WunderGraphContextProperties,
	Client,
	User,
} from "@wundergraph/sdk/dist/nextjs";

export type Role = "user" | "superadmin";

export enum AuthProvider {
	"github" = "github",
}

export const AuthProviders = {
	github: AuthProvider.github,
};

const defaultWunderGraphContextProperties: WunderGraphContextProperties<Role> = {
	ssrCache: {},
	client: new Client({
		applicationHash: "b70be929",
		applicationPath: "api/main",
		baseURL: "http://localhost:9991",
		sdkVersion: "1.0.0-next.25",
	}),
	user: null,
	setUser: (value) => {},
	isWindowFocused: "pristine",
	setIsWindowFocused: (value) => {},
	refetchMountedOperations: 0,
	setRefetchMountedOperations: (value) => {},
};

export const WunderGraphContext = createContext<WunderGraphContextProperties<Role>>(
	defaultWunderGraphContextProperties
);

export const withWunderGraph = hooks.withWunderGraphContextWrapper(
	WunderGraphContext,
	defaultWunderGraphContextProperties
);

export const useWunderGraph = hooks.useWunderGraph(WunderGraphContext);

export const useQuery = {
	AllUsers: (args: QueryArgsWithInput<AllUsersInput>) =>
		hooks.useQueryWithInput<AllUsersInput, AllUsersResponseData, Role>(WunderGraphContext, {
			operationName: "AllUsers",
			requiresAuthentication: false,
		})(args),
	Countries: hooks.useQueryWithoutInput<CountriesResponseData, Role>(WunderGraphContext, {
		operationName: "Countries",
		requiresAuthentication: false,
	}),
	Germany: hooks.useQueryWithoutInput<GermanyResponseData, Role>(WunderGraphContext, {
		operationName: "Germany",
		requiresAuthentication: false,
	}),
	Hello: hooks.useQueryWithoutInput<HelloResponseData, Role>(WunderGraphContext, {
		operationName: "Hello",
		requiresAuthentication: false,
	}),
	Messages: hooks.useQueryWithoutInput<MessagesResponseData, Role>(WunderGraphContext, {
		operationName: "Messages",
		requiresAuthentication: false,
	}),
	Query: hooks.useQueryWithoutInput<QueryResponseData, Role>(WunderGraphContext, {
		operationName: "Query",
		requiresAuthentication: false,
	}),
	Us: hooks.useQueryWithoutInput<UsResponseData, Role>(WunderGraphContext, {
		operationName: "Us",
		requiresAuthentication: false,
	}),
	UserInfo: hooks.useQueryWithoutInput<UserInfoResponseData, Role>(WunderGraphContext, {
		operationName: "UserInfo",
		requiresAuthentication: true,
	}),
};

export const useMutation = {
	AddMessage: () =>
		hooks.useMutationWithInput<AddMessageInput, AddMessageResponseData, Role>(WunderGraphContext, {
			operationName: "AddMessage",
			requiresAuthentication: true,
		}),
	ChangeUserName: () =>
		hooks.useMutationWithInput<ChangeUserNameInput, ChangeUserNameResponseData, Role>(WunderGraphContext, {
			operationName: "ChangeUserName",
			requiresAuthentication: true,
		}),
	DeleteAllMessagesByUserEmail: () =>
		hooks.useMutationWithInput<DeleteAllMessagesByUserEmailInput, DeleteAllMessagesByUserEmailResponseData, Role>(
			WunderGraphContext,
			{
				operationName: "DeleteAllMessagesByUserEmail",
				requiresAuthentication: true,
			}
		),
	UpdateUser: () =>
		hooks.useMutationWithInput<UpdateUserInput, UpdateUserResponseData, Role>(WunderGraphContext, {
			operationName: "UpdateUser",
			requiresAuthentication: false,
		}),
};

export const useSubscription = {};

export const useLiveQuery = {
	AllUsers: (args: SubscriptionArgsWithInput<AllUsersInput>) =>
		hooks.useSubscriptionWithInput<AllUsersInput, AllUsersResponseData, Role>(WunderGraphContext, {
			operationName: "AllUsers",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	Countries: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<CountriesResponseData, Role>(WunderGraphContext, {
			operationName: "Countries",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	Germany: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<GermanyResponseData, Role>(WunderGraphContext, {
			operationName: "Germany",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	Hello: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<HelloResponseData, Role>(WunderGraphContext, {
			operationName: "Hello",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	Messages: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<MessagesResponseData, Role>(WunderGraphContext, {
			operationName: "Messages",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	Query: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<QueryResponseData, Role>(WunderGraphContext, {
			operationName: "Query",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	Us: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<UsResponseData, Role>(WunderGraphContext, {
			operationName: "Us",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	UserInfo: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<UserInfoResponseData, Role>(WunderGraphContext, {
			operationName: "UserInfo",
			isLiveQuery: true,
			requiresAuthentication: true,
		})(args),
};
